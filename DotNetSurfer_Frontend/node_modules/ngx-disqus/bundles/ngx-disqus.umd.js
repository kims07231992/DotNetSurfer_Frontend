(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-disqus', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ngx-disqus'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SHORTNAME = new core.InjectionToken('SHORTNAME');

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var WINDOW = new core.InjectionToken('WindowToken');
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ WindowRef = (function () {
        function WindowRef() {
        }
        Object.defineProperty(WindowRef.prototype, "nativeWindow", {
            get: /**
             * @return {?}
             */ function () {
                throw new Error('Not implemented.');
            },
            enumerable: true,
            configurable: true
        });
        return WindowRef;
    }());
    var BrowserWindowRef = (function (_super) {
        __extends(BrowserWindowRef, _super);
        function BrowserWindowRef() {
            return _super.call(this) || this;
        }
        Object.defineProperty(BrowserWindowRef.prototype, "nativeWindow", {
            get: /**
             * @return {?}
             */ function () {
                return window;
            },
            enumerable: true,
            configurable: true
        });
        return BrowserWindowRef;
    }(WindowRef));
    /**
     * @param {?} browserWindowRef
     * @param {?} platformId
     * @return {?}
     */
    function windowFactory(browserWindowRef, platformId) {
        if (common.isPlatformBrowser(platformId)) {
            return browserWindowRef.nativeWindow;
        }
        return new Object();
    }
    /** @type {?} */
    var browserWindowProvider = {
        provide: WindowRef,
        useClass: BrowserWindowRef
    };
    /** @type {?} */
    var windowProvider = {
        provide: WINDOW,
        useFactory: windowFactory,
        deps: [WindowRef, core.PLATFORM_ID]
    };
    /** @type {?} */
    var WINDOW_PROVIDERS = [
        browserWindowProvider,
        windowProvider
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DisqusService = (function () {
        function DisqusService(shortname, _window) {
            this.shortname = shortname;
            this._window = _window;
        }
        Object.defineProperty(DisqusService.prototype, "DISQUS", {
            get: /**
             * @return {?}
             */ function () {
                return this._window.DISQUS;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DisqusService.prototype, "disqus_config", {
            get: /**
             * @return {?}
             */ function () {
                return this._window.disqus_config;
            },
            set: /**
             * @param {?} config
             * @return {?}
             */ function (config) {
                this._window.disqus_config = config;
            },
            enumerable: true,
            configurable: true
        });
        DisqusService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        DisqusService.ctorParameters = function () {
            return [
                { type: String, decorators: [{ type: core.Inject, args: [SHORTNAME,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [WINDOW,] }] }
            ];
        };
        return DisqusService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DisqusComponent = (function () {
        function DisqusComponent(renderer, el, dService) {
            this.renderer = renderer;
            this.el = el;
            this.dService = dService;
            /**
             * DISQUS events
             */
            this.newComment = new core.EventEmitter(true);
            this.ready = new core.EventEmitter(true);
            this.paginate = new core.EventEmitter(true);
        }
        /**
         * @return {?}
         */
        DisqusComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                /** Reset Disqus if any input changed */
                if (!this.dService.DISQUS) {
                    this.addDisqusScript();
                }
                else {
                    this.reset();
                }
            };
        /** Add DISQUS script */
        /**
         * Add DISQUS script
         * @return {?}
         */
        DisqusComponent.prototype.addDisqusScript = /**
         * Add DISQUS script
         * @return {?}
         */
            function () {
                /** Set DISQUS config */
                this.dService.disqus_config = this.getConfig();
                /** @type {?} */
                var disqusScript = this.renderer.createElement('script');
                disqusScript.src = "//" + this.dService.shortname + ".disqus.com/embed.js";
                disqusScript.async = true;
                disqusScript.type = 'text/javascript';
                this.renderer.setAttribute(disqusScript, 'data-timestamp', new Date().getTime().toString());
                this.renderer.appendChild(this.el.nativeElement, disqusScript);
            };
        /** Reset DISQUS with the new config */
        /**
         * Reset DISQUS with the new config
         * @return {?}
         */
        DisqusComponent.prototype.reset = /**
         * Reset DISQUS with the new config
         * @return {?}
         */
            function () {
                this.dService.DISQUS.reset({
                    reload: true,
                    config: this.getConfig()
                });
            };
        /** Create DISQUS config from inputs */
        /**
         * Create DISQUS config from inputs
         * @return {?}
         */
        DisqusComponent.prototype.getConfig = /**
         * Create DISQUS config from inputs
         * @return {?}
         */
            function () {
                /** @type {?} */
                var self = this;
                return function () {
                    this.page.identifier = self.identifier;
                    this.page.url = self.validateUrl(self.url);
                    this.page.title = self.title;
                    this.category_id = self.category;
                    this.language = self.language;
                    /* Available callbacks are afterRender, onInit, onNewComment, onPaginate, onReady, preData, preInit, preReset */
                    this.callbacks.onNewComment = [function (e) {
                            self.newComment.emit(e);
                        }];
                    this.callbacks.onReady = [function (e) {
                            self.ready.emit(e);
                        }];
                    this.callbacks.onPaginate = [function (e) {
                            self.paginate.emit(e);
                        }];
                };
            };
        /**
         * @param {?} url
         * @return {?}
         */
        DisqusComponent.prototype.validateUrl = /**
         * @param {?} url
         * @return {?}
         */
            function (url) {
                /** Validate URL input */
                if (url) {
                    /** @type {?} */
                    var r = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
                    if (r.test(url)) {
                        return url;
                    }
                    else {
                        console.warn('[Disqus]: Invalid URL, return undefined');
                    }
                }
                /** DISQUS will fallback to "Window.location.href" when URL is undefined */
                return undefined;
            };
        DisqusComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'disqus',
                        template: '<div id="disqus_thread"></div>',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        DisqusComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: core.ElementRef },
                { type: DisqusService }
            ];
        };
        DisqusComponent.propDecorators = {
            url: [{ type: core.Input }],
            identifier: [{ type: core.Input }],
            title: [{ type: core.Input }],
            category: [{ type: core.Input }],
            language: [{ type: core.Input }],
            newComment: [{ type: core.Output }],
            ready: [{ type: core.Output }],
            paginate: [{ type: core.Output }]
        };
        return DisqusComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Initialize Disqus with shortname
     * @param {?} shortname
     * @param {?} window
     * @return {?}
     */
    function DisqusFactory(shortname, window) {
        return new DisqusService(shortname, window);
    }
    var DisqusModule = (function () {
        function DisqusModule() {
        }
        /**
         * @param {?} shortname
         * @return {?}
         */
        DisqusModule.forRoot = /**
         * @param {?} shortname
         * @return {?}
         */
            function (shortname) {
                return {
                    ngModule: DisqusModule,
                    providers: [
                        WINDOW_PROVIDERS,
                        { provide: SHORTNAME, useValue: shortname },
                        {
                            provide: DisqusService,
                            useFactory: DisqusFactory,
                            deps: [SHORTNAME, WINDOW]
                        },
                    ]
                };
            };
        DisqusModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [DisqusComponent],
                        exports: [DisqusComponent]
                    },] },
        ];
        return DisqusModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.DisqusModule = DisqusModule;
    exports.DisqusService = DisqusService;
    exports.ɵb = DisqusComponent;
    exports.ɵa = DisqusFactory;
    exports.ɵc = SHORTNAME;
    exports.ɵf = BrowserWindowRef;
    exports.ɵd = WINDOW;
    exports.ɵj = WINDOW_PROVIDERS;
    exports.ɵe = WindowRef;
    exports.ɵh = browserWindowProvider;
    exports.ɵg = windowFactory;
    exports.ɵi = windowProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,