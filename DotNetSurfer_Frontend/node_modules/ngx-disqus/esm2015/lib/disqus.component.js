/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, Renderer2, ElementRef, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { DisqusService } from './disqus.service';
export class DisqusComponent {
    /**
     * @param {?} renderer
     * @param {?} el
     * @param {?} dService
     */
    constructor(renderer, el, dService) {
        this.renderer = renderer;
        this.el = el;
        this.dService = dService;
        /**
         * DISQUS events
         */
        this.newComment = new EventEmitter(true);
        this.ready = new EventEmitter(true);
        this.paginate = new EventEmitter(true);
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        /** Reset Disqus if any input changed */
        if (!this.dService.DISQUS) {
            this.addDisqusScript();
        }
        else {
            this.reset();
        }
    }
    /**
     * Add DISQUS script
     * @return {?}
     */
    addDisqusScript() {
        /** Set DISQUS config */
        this.dService.disqus_config = this.getConfig();
        /** @type {?} */
        const disqusScript = this.renderer.createElement('script');
        disqusScript.src = `//${this.dService.shortname}.disqus.com/embed.js`;
        disqusScript.async = true;
        disqusScript.type = 'text/javascript';
        this.renderer.setAttribute(disqusScript, 'data-timestamp', new Date().getTime().toString());
        this.renderer.appendChild(this.el.nativeElement, disqusScript);
    }
    /**
     * Reset DISQUS with the new config
     * @return {?}
     */
    reset() {
        this.dService.DISQUS.reset({
            reload: true,
            config: this.getConfig()
        });
    }
    /**
     * Create DISQUS config from inputs
     * @return {?}
     */
    getConfig() {
        /** @type {?} */
        const self = this;
        return function () {
            this.page.identifier = self.identifier;
            this.page.url = self.validateUrl(self.url);
            this.page.title = self.title;
            this.category_id = self.category;
            this.language = self.language;
            /* Available callbacks are afterRender, onInit, onNewComment, onPaginate, onReady, preData, preInit, preReset */
            this.callbacks.onNewComment = [(e) => {
                    self.newComment.emit(e);
                }];
            this.callbacks.onReady = [(e) => {
                    self.ready.emit(e);
                }];
            this.callbacks.onPaginate = [(e) => {
                    self.paginate.emit(e);
                }];
        };
    }
    /**
     * @param {?} url
     * @return {?}
     */
    validateUrl(url) {
        /** Validate URL input */
        if (url) {
            /** @type {?} */
            const r = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
            if (r.test(url)) {
                return url;
            }
            else {
                console.warn('[Disqus]: Invalid URL, return undefined');
            }
        }
        /** DISQUS will fallback to "Window.location.href" when URL is undefined */
        return undefined;
    }
}
DisqusComponent.decorators = [
    { type: Component, args: [{
                selector: 'disqus',
                template: '<div id="disqus_thread"></div>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
DisqusComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: DisqusService }
];
DisqusComponent.propDecorators = {
    url: [{ type: Input }],
    identifier: [{ type: Input }],
    title: [{ type: Input }],
    category: [{ type: Input }],
    language: [{ type: Input }],
    newComment: [{ type: Output }],
    ready: [{ type: Output }],
    paginate: [{ type: Output }]
};
if (false) {
    /**
     * DISQUS options
     * @type {?}
     */
    DisqusComponent.prototype.url;
    /** @type {?} */
    DisqusComponent.prototype.identifier;
    /** @type {?} */
    DisqusComponent.prototype.title;
    /** @type {?} */
    DisqusComponent.prototype.category;
    /** @type {?} */
    DisqusComponent.prototype.language;
    /**
     * DISQUS events
     * @type {?}
     */
    DisqusComponent.prototype.newComment;
    /** @type {?} */
    DisqusComponent.prototype.ready;
    /** @type {?} */
    DisqusComponent.prototype.paginate;
    /** @type {?} */
    DisqusComponent.prototype.renderer;
    /** @type {?} */
    DisqusComponent.prototype.el;
    /** @type {?} */
    DisqusComponent.prototype.dService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcXVzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1kaXNxdXMvIiwic291cmNlcyI6WyJsaWIvZGlzcXVzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUVOLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLHVCQUF1QixFQUN4QixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFTakQsTUFBTTs7Ozs7O0lBY0osWUFBb0IsUUFBbUIsRUFBVSxFQUFjLEVBQVUsUUFBdUI7UUFBNUUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFlOzs7OzBCQUp6RSxJQUFJLFlBQVksQ0FBZ0IsSUFBSSxDQUFDO3FCQUMxQyxJQUFJLFlBQVksQ0FBYyxJQUFJLENBQUM7d0JBQ2hDLElBQUksWUFBWSxDQUFNLElBQUksQ0FBQztLQUc5Qzs7OztJQUVGLFdBQVc7O1FBR1QsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ3hCO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZDtLQUNGOzs7OztJQUdELGVBQWU7O1FBR2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDOztRQUUvQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzRCxZQUFZLENBQUMsR0FBRyxHQUFHLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLHNCQUFzQixDQUFDO1FBQ3RFLFlBQVksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQzFCLFlBQVksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLGdCQUFnQixFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUM1RixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztLQUNoRTs7Ozs7SUFHRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ3pCLE1BQU0sRUFBRSxJQUFJO1lBQ1osTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUU7U0FDekIsQ0FBQyxDQUFDO0tBQ0o7Ozs7O0lBR0QsU0FBUzs7UUFDUCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbEIsTUFBTSxDQUFDO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7O1lBRzlCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtvQkFDbkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3pCLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtvQkFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3BCLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtvQkFDakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3ZCLENBQUMsQ0FBQztTQUNKLENBQUM7S0FDSDs7Ozs7SUFFRCxXQUFXLENBQUMsR0FBVzs7UUFFckIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs7WUFDUixNQUFNLENBQUMsR0FBRywrRUFBK0UsQ0FBQztZQUUxRixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsTUFBTSxDQUFDLEdBQUcsQ0FBQzthQUNaO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sT0FBTyxDQUFDLElBQUksQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO2FBQ3pEO1NBQ0Y7O1FBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQztLQUNsQjs7O1lBN0ZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsUUFBUTtnQkFDbEIsUUFBUSxFQUFFLGdDQUFnQztnQkFDMUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7Ozs7WUFaQyxTQUFTO1lBQ1QsVUFBVTtZQUlILGFBQWE7OztrQkFZbkIsS0FBSzt5QkFDTCxLQUFLO29CQUNMLEtBQUs7dUJBQ0wsS0FBSzt1QkFDTCxLQUFLO3lCQUdMLE1BQU07b0JBQ04sTUFBTTt1QkFDTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIE9uQ2hhbmdlcyxcclxuICBSZW5kZXJlcjIsXHJcbiAgRWxlbWVudFJlZixcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3lcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGlzcXVzU2VydmljZSB9IGZyb20gJy4vZGlzcXVzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBEaXNxdXNDb21tZW50LCBEaXNxdXNSZWFkeSB9IGZyb20gJy4vZGlzcXVzLm1vZGVsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZGlzcXVzJyxcclxuICB0ZW1wbGF0ZTogJzxkaXYgaWQ9XCJkaXNxdXNfdGhyZWFkXCI+PC9kaXY+JyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIERpc3F1c0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcblxyXG4gIC8qKiBESVNRVVMgb3B0aW9ucyAqL1xyXG4gIEBJbnB1dCgpIHVybDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGlkZW50aWZpZXI6IHN0cmluZztcclxuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGNhdGVnb3J5OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgbGFuZ3VhZ2U6IHN0cmluZztcclxuXHJcbiAgLyoqIERJU1FVUyBldmVudHMgKi9cclxuICBAT3V0cHV0KCkgbmV3Q29tbWVudCA9IG5ldyBFdmVudEVtaXR0ZXI8RGlzcXVzQ29tbWVudD4odHJ1ZSk7XHJcbiAgQE91dHB1dCgpIHJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcjxEaXNxdXNSZWFkeT4odHJ1ZSk7XHJcbiAgQE91dHB1dCgpIHBhZ2luYXRlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KHRydWUpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgZFNlcnZpY2U6IERpc3F1c1NlcnZpY2UpIHtcclxuICAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcygpIHtcclxuICAgIC8qKiBSZXNldCBEaXNxdXMgaWYgYW55IGlucHV0IGNoYW5nZWQgKi9cclxuXHJcbiAgICBpZiAoIXRoaXMuZFNlcnZpY2UuRElTUVVTKSB7XHJcbiAgICAgIHRoaXMuYWRkRGlzcXVzU2NyaXB0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogQWRkIERJU1FVUyBzY3JpcHQgKi9cclxuICBhZGREaXNxdXNTY3JpcHQoKSB7XHJcblxyXG4gICAgLyoqIFNldCBESVNRVVMgY29uZmlnICovXHJcbiAgICB0aGlzLmRTZXJ2aWNlLmRpc3F1c19jb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xyXG5cclxuICAgIGNvbnN0IGRpc3F1c1NjcmlwdCA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICBkaXNxdXNTY3JpcHQuc3JjID0gYC8vJHt0aGlzLmRTZXJ2aWNlLnNob3J0bmFtZX0uZGlzcXVzLmNvbS9lbWJlZC5qc2A7XHJcbiAgICBkaXNxdXNTY3JpcHQuYXN5bmMgPSB0cnVlO1xyXG4gICAgZGlzcXVzU2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcclxuICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGRpc3F1c1NjcmlwdCwgJ2RhdGEtdGltZXN0YW1wJywgbmV3IERhdGUoKS5nZXRUaW1lKCkudG9TdHJpbmcoKSk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgZGlzcXVzU2NyaXB0KTtcclxuICB9XHJcblxyXG4gIC8qKiBSZXNldCBESVNRVVMgd2l0aCB0aGUgbmV3IGNvbmZpZyAqL1xyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5kU2VydmljZS5ESVNRVVMucmVzZXQoe1xyXG4gICAgICByZWxvYWQ6IHRydWUsXHJcbiAgICAgIGNvbmZpZzogdGhpcy5nZXRDb25maWcoKVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKiogQ3JlYXRlIERJU1FVUyBjb25maWcgZnJvbSBpbnB1dHMgKi9cclxuICBnZXRDb25maWcoKSB7XHJcbiAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRoaXMucGFnZS5pZGVudGlmaWVyID0gc2VsZi5pZGVudGlmaWVyO1xyXG4gICAgICB0aGlzLnBhZ2UudXJsID0gc2VsZi52YWxpZGF0ZVVybChzZWxmLnVybCk7XHJcbiAgICAgIHRoaXMucGFnZS50aXRsZSA9IHNlbGYudGl0bGU7XHJcbiAgICAgIHRoaXMuY2F0ZWdvcnlfaWQgPSBzZWxmLmNhdGVnb3J5O1xyXG4gICAgICB0aGlzLmxhbmd1YWdlID0gc2VsZi5sYW5ndWFnZTtcclxuXHJcbiAgICAgIC8qIEF2YWlsYWJsZSBjYWxsYmFja3MgYXJlIGFmdGVyUmVuZGVyLCBvbkluaXQsIG9uTmV3Q29tbWVudCwgb25QYWdpbmF0ZSwgb25SZWFkeSwgcHJlRGF0YSwgcHJlSW5pdCwgcHJlUmVzZXQgKi9cclxuICAgICAgdGhpcy5jYWxsYmFja3Mub25OZXdDb21tZW50ID0gWyhlKSA9PiB7XHJcbiAgICAgICAgc2VsZi5uZXdDb21tZW50LmVtaXQoZSk7XHJcbiAgICAgIH1dO1xyXG5cclxuICAgICAgdGhpcy5jYWxsYmFja3Mub25SZWFkeSA9IFsoZSkgPT4ge1xyXG4gICAgICAgIHNlbGYucmVhZHkuZW1pdChlKTtcclxuICAgICAgfV07XHJcblxyXG4gICAgICB0aGlzLmNhbGxiYWNrcy5vblBhZ2luYXRlID0gWyhlKSA9PiB7XHJcbiAgICAgICAgc2VsZi5wYWdpbmF0ZS5lbWl0KGUpO1xyXG4gICAgICB9XTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB2YWxpZGF0ZVVybCh1cmw6IHN0cmluZykge1xyXG4gICAgLyoqIFZhbGlkYXRlIFVSTCBpbnB1dCAqL1xyXG4gICAgaWYgKHVybCkge1xyXG4gICAgICBjb25zdCByID0gLyhodHRwfGh0dHBzKTpcXC9cXC8oXFx3Kzp7MCwxfVxcdypAKT8oXFxTKykoOlswLTldKyk/KFxcL3xcXC8oW1xcdyMhOi4/Kz0mJUAhXFwtXFwvXSkpPy87XHJcblxyXG4gICAgICBpZiAoci50ZXN0KHVybCkpIHtcclxuICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignW0Rpc3F1c106IEludmFsaWQgVVJMLCByZXR1cm4gdW5kZWZpbmVkJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKiBESVNRVVMgd2lsbCBmYWxsYmFjayB0byBcIldpbmRvdy5sb2NhdGlvbi5ocmVmXCIgd2hlbiBVUkwgaXMgdW5kZWZpbmVkICovXHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbn1cclxuIl19