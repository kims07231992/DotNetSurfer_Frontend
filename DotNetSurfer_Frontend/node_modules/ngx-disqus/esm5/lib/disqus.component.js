/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, Renderer2, ElementRef, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { DisqusService } from './disqus.service';
var DisqusComponent = /** @class */ (function () {
    function DisqusComponent(renderer, el, dService) {
        this.renderer = renderer;
        this.el = el;
        this.dService = dService;
        /**
         * DISQUS events
         */
        this.newComment = new EventEmitter(true);
        this.ready = new EventEmitter(true);
        this.paginate = new EventEmitter(true);
    }
    /**
     * @return {?}
     */
    DisqusComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        /** Reset Disqus if any input changed */
        if (!this.dService.DISQUS) {
            this.addDisqusScript();
        }
        else {
            this.reset();
        }
    };
    /** Add DISQUS script */
    /**
     * Add DISQUS script
     * @return {?}
     */
    DisqusComponent.prototype.addDisqusScript = /**
     * Add DISQUS script
     * @return {?}
     */
    function () {
        /** Set DISQUS config */
        this.dService.disqus_config = this.getConfig();
        /** @type {?} */
        var disqusScript = this.renderer.createElement('script');
        disqusScript.src = "//" + this.dService.shortname + ".disqus.com/embed.js";
        disqusScript.async = true;
        disqusScript.type = 'text/javascript';
        this.renderer.setAttribute(disqusScript, 'data-timestamp', new Date().getTime().toString());
        this.renderer.appendChild(this.el.nativeElement, disqusScript);
    };
    /** Reset DISQUS with the new config */
    /**
     * Reset DISQUS with the new config
     * @return {?}
     */
    DisqusComponent.prototype.reset = /**
     * Reset DISQUS with the new config
     * @return {?}
     */
    function () {
        this.dService.DISQUS.reset({
            reload: true,
            config: this.getConfig()
        });
    };
    /** Create DISQUS config from inputs */
    /**
     * Create DISQUS config from inputs
     * @return {?}
     */
    DisqusComponent.prototype.getConfig = /**
     * Create DISQUS config from inputs
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        return function () {
            this.page.identifier = self.identifier;
            this.page.url = self.validateUrl(self.url);
            this.page.title = self.title;
            this.category_id = self.category;
            this.language = self.language;
            /* Available callbacks are afterRender, onInit, onNewComment, onPaginate, onReady, preData, preInit, preReset */
            this.callbacks.onNewComment = [function (e) {
                    self.newComment.emit(e);
                }];
            this.callbacks.onReady = [function (e) {
                    self.ready.emit(e);
                }];
            this.callbacks.onPaginate = [function (e) {
                    self.paginate.emit(e);
                }];
        };
    };
    /**
     * @param {?} url
     * @return {?}
     */
    DisqusComponent.prototype.validateUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** Validate URL input */
        if (url) {
            /** @type {?} */
            var r = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
            if (r.test(url)) {
                return url;
            }
            else {
                console.warn('[Disqus]: Invalid URL, return undefined');
            }
        }
        /** DISQUS will fallback to "Window.location.href" when URL is undefined */
        return undefined;
    };
    DisqusComponent.decorators = [
        { type: Component, args: [{
                    selector: 'disqus',
                    template: '<div id="disqus_thread"></div>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    DisqusComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: DisqusService }
    ]; };
    DisqusComponent.propDecorators = {
        url: [{ type: Input }],
        identifier: [{ type: Input }],
        title: [{ type: Input }],
        category: [{ type: Input }],
        language: [{ type: Input }],
        newComment: [{ type: Output }],
        ready: [{ type: Output }],
        paginate: [{ type: Output }]
    };
    return DisqusComponent;
}());
export { DisqusComponent };
if (false) {
    /**
     * DISQUS options
     * @type {?}
     */
    DisqusComponent.prototype.url;
    /** @type {?} */
    DisqusComponent.prototype.identifier;
    /** @type {?} */
    DisqusComponent.prototype.title;
    /** @type {?} */
    DisqusComponent.prototype.category;
    /** @type {?} */
    DisqusComponent.prototype.language;
    /**
     * DISQUS events
     * @type {?}
     */
    DisqusComponent.prototype.newComment;
    /** @type {?} */
    DisqusComponent.prototype.ready;
    /** @type {?} */
    DisqusComponent.prototype.paginate;
    /** @type {?} */
    DisqusComponent.prototype.renderer;
    /** @type {?} */
    DisqusComponent.prototype.el;
    /** @type {?} */
    DisqusComponent.prototype.dService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcXVzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1kaXNxdXMvIiwic291cmNlcyI6WyJsaWIvZGlzcXVzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUVOLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLHVCQUF1QixFQUN4QixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0lBdUIvQyx5QkFBb0IsUUFBbUIsRUFBVSxFQUFjLEVBQVUsUUFBdUI7UUFBNUUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFlOzs7OzBCQUp6RSxJQUFJLFlBQVksQ0FBZ0IsSUFBSSxDQUFDO3FCQUMxQyxJQUFJLFlBQVksQ0FBYyxJQUFJLENBQUM7d0JBQ2hDLElBQUksWUFBWSxDQUFNLElBQUksQ0FBQztLQUc5Qzs7OztJQUVGLHFDQUFXOzs7SUFBWDs7UUFHRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDeEI7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNkO0tBQ0Y7SUFFRCx3QkFBd0I7Ozs7O0lBQ3hCLHlDQUFlOzs7O0lBQWY7O1FBR0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDOztRQUUvQyxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzRCxZQUFZLENBQUMsR0FBRyxHQUFHLE9BQUssSUFBSSxDQUFDLFFB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bmVudCxcclxuICBJbnB1dCxcclxuICBPdXRwdXQsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIFJlbmRlcmVyMixcclxuICBFbGVtZW50UmVmLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEaXNxdXNTZXJ2aWNlIH0gZnJvbSAnLi9kaXNxdXMuc2VydmljZSc7XHJcbmltcG9ydCB7IERpc3F1c0NvbW1lbnQsIERpc3F1c1JlYWR5IH0gZnJvbSAnLi9kaXNxdXMubW9kZWwnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdkaXNxdXMnLFxyXG4gIHRlbXBsYXRlOiAnPGRpdiBpZD1cImRpc3F1c190aHJlYWRcIj48L2Rpdj4nLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRGlzcXVzQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgLyoqIERJU1FVUyBvcHRpb25zICovXHJcbiAgQElucHV0KCkgdXJsOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgaWRlbnRpZmllcjogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgY2F0ZWdvcnk6IHN0cmluZztcclxuICBASW5wdXQoKSBsYW5ndWFnZTogc3RyaW5nO1xyXG5cclxuICAvKiogRElTUVVTIGV2ZW50cyAqL1xyXG4gIEBPdXRwdXQoKSBuZXdDb21tZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxEaXNxdXNDb21tZW50Pih0cnVlKTtcclxuICBAT3V0cHV0KCkgcmVhZHkgPSBuZXcgRXZlbnRFbWl0dGVyPERpc3F1c1JlYWR5Pih0cnVlKTtcclxuICBAT3V0cHV0KCkgcGFnaW5hdGUgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4odHJ1ZSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBkU2VydmljZTogRGlzcXVzU2VydmljZSkge1xyXG4gICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKCkge1xyXG4gICAgLyoqIFJlc2V0IERpc3F1cyBpZiBhbnkgaW5wdXQgY2hhbmdlZCAqL1xyXG5cclxuICAgIGlmICghdGhpcy5kU2VydmljZS5ESVNRVVMpIHtcclxuICAgICAgdGhpcy5hZGREaXNxdXNTY3JpcHQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBBZGQgRElTUVVTIHNjcmlwdCAqL1xyXG4gIGFkZERpc3F1c1NjcmlwdCgpIHtcclxuXHJcbiAgICAvKiogU2V0IERJU1FVUyBjb25maWcgKi9cclxuICAgIHRoaXMuZFNlcnZpY2UuZGlzcXVzX2NvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XHJcblxyXG4gICAgY29uc3QgZGlzcXVzU2NyaXB0ID0gdGhpcy5yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgIGRpc3F1c1NjcmlwdC5zcmMgPSBgLy8ke3RoaXMuZFNlcnZpY2Uuc2hvcnRuYW1lfS5kaXNxdXMuY29tL2VtYmVkLmpzYDtcclxuICAgIGRpc3F1c1NjcmlwdC5hc3luYyA9IHRydWU7XHJcbiAgICBkaXNxdXNTY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZGlzcXVzU2NyaXB0LCAnZGF0YS10aW1lc3RhbXAnLCBuZXcgRGF0ZSgpLmdldFRpbWUoKS50b1N0cmluZygpKTtcclxuICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQodGhpcy5lbC5uYXRpdmVFbGVtZW50LCBkaXNxdXNTY3JpcHQpO1xyXG4gIH1cclxuXHJcbiAgLyoqIFJlc2V0IERJU1FVUyB3aXRoIHRoZSBuZXcgY29uZmlnICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLmRTZXJ2aWNlLkRJU1FVUy5yZXNldCh7XHJcbiAgICAgIHJlbG9hZDogdHJ1ZSxcclxuICAgICAgY29uZmlnOiB0aGlzLmdldENvbmZpZygpXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKiBDcmVhdGUgRElTUVVTIGNvbmZpZyBmcm9tIGlucHV0cyAqL1xyXG4gIGdldENvbmZpZygpIHtcclxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5wYWdlLmlkZW50aWZpZXIgPSBzZWxmLmlkZW50aWZpZXI7XHJcbiAgICAgIHRoaXMucGFnZS51cmwgPSBzZWxmLnZhbGlkYXRlVXJsKHNlbGYudXJsKTtcclxuICAgICAgdGhpcy5wYWdlLnRpdGxlID0gc2VsZi50aXRsZTtcclxuICAgICAgdGhpcy5jYXRlZ29yeV9pZCA9IHNlbGYuY2F0ZWdvcnk7XHJcbiAgICAgIHRoaXMubGFuZ3VhZ2UgPSBzZWxmLmxhbmd1YWdlO1xyXG5cclxuICAgICAgLyogQXZhaWxhYmxlIGNhbGxiYWNrcyBhcmUgYWZ0ZXJSZW5kZXIsIG9uSW5pdCwgb25OZXdDb21tZW50LCBvblBhZ2luYXRlLCBvblJlYWR5LCBwcmVEYXRhLCBwcmVJbml0LCBwcmVSZXNldCAqL1xyXG4gICAgICB0aGlzLmNhbGxiYWNrcy5vbk5ld0NvbW1lbnQgPSBbKGUpID0+IHtcclxuICAgICAgICBzZWxmLm5ld0NvbW1lbnQuZW1pdChlKTtcclxuICAgICAgfV07XHJcblxyXG4gICAgICB0aGlzLmNhbGxiYWNrcy5vblJlYWR5ID0gWyhlKSA9PiB7XHJcbiAgICAgICAgc2VsZi5yZWFkeS5lbWl0KGUpO1xyXG4gICAgICB9XTtcclxuXHJcbiAgICAgIHRoaXMuY2FsbGJhY2tzLm9uUGFnaW5hdGUgPSBbKGUpID0+IHtcclxuICAgICAgICBzZWxmLnBhZ2luYXRlLmVtaXQoZSk7XHJcbiAgICAgIH1dO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHZhbGlkYXRlVXJsKHVybDogc3RyaW5nKSB7XHJcbiAgICAvKiogVmFsaWRhdGUgVVJMIGlucHV0ICovXHJcbiAgICBpZiAodXJsKSB7XHJcbiAgICAgIGNvbnN0IHIgPSAvKGh0dHB8aHR0cHMpOlxcL1xcLyhcXHcrOnswLDF9XFx3KkApPyhcXFMrKSg6WzAtOV0rKT8oXFwvfFxcLyhbXFx3IyE6Lj8rPSYlQCFcXC1cXC9dKSk/LztcclxuXHJcbiAgICAgIGlmIChyLnRlc3QodXJsKSkge1xyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdbRGlzcXVzXTogSW52YWxpZCBVUkwsIHJldHVybiB1bmRlZmluZWQnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqIERJU1FVUyB3aWxsIGZhbGxiYWNrIHRvIFwiV2luZG93LmxvY2F0aW9uLmhyZWZcIiB3aGVuIFVSTCBpcyB1bmRlZmluZWQgKi9cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=