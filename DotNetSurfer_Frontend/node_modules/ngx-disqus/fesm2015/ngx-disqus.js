import { InjectionToken, PLATFORM_ID, Injectable, Inject, Component, Input, Output, Renderer2, ElementRef, EventEmitter, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const SHORTNAME = new InjectionToken('SHORTNAME');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const WINDOW = new InjectionToken('WindowToken');
/**
 * @abstract
 */
class WindowRef {
    /**
     * @return {?}
     */
    get nativeWindow() {
        throw new Error('Not implemented.');
    }
}
class BrowserWindowRef extends WindowRef {
    constructor() {
        super();
    }
    /**
     * @return {?}
     */
    get nativeWindow() {
        return window;
    }
}
/**
 * @param {?} browserWindowRef
 * @param {?} platformId
 * @return {?}
 */
function windowFactory(browserWindowRef, platformId) {
    if (isPlatformBrowser(platformId)) {
        return browserWindowRef.nativeWindow;
    }
    return new Object();
}
/** @type {?} */
const browserWindowProvider = {
    provide: WindowRef,
    useClass: BrowserWindowRef
};
/** @type {?} */
const windowProvider = {
    provide: WINDOW,
    useFactory: windowFactory,
    deps: [WindowRef, PLATFORM_ID]
};
/** @type {?} */
const WINDOW_PROVIDERS = [
    browserWindowProvider,
    windowProvider
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DisqusService {
    /**
     * @param {?} shortname
     * @param {?} _window
     */
    constructor(shortname, _window) {
        this.shortname = shortname;
        this._window = _window;
    }
    /**
     * @return {?}
     */
    get DISQUS() {
        return this._window.DISQUS;
    }
    /**
     * @return {?}
     */
    get disqus_config() {
        return this._window.disqus_config;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    set disqus_config(config) {
        this._window.disqus_config = config;
    }
}
DisqusService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
DisqusService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [SHORTNAME,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WINDOW,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DisqusComponent {
    /**
     * @param {?} renderer
     * @param {?} el
     * @param {?} dService
     */
    constructor(renderer, el, dService) {
        this.renderer = renderer;
        this.el = el;
        this.dService = dService;
        /**
         * DISQUS events
         */
        this.newComment = new EventEmitter(true);
        this.ready = new EventEmitter(true);
        this.paginate = new EventEmitter(true);
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        /** Reset Disqus if any input changed */
        if (!this.dService.DISQUS) {
            this.addDisqusScript();
        }
        else {
            this.reset();
        }
    }
    /**
     * Add DISQUS script
     * @return {?}
     */
    addDisqusScript() {
        /** Set DISQUS config */
        this.dService.disqus_config = this.getConfig();
        /** @type {?} */
        const disqusScript = this.renderer.createElement('script');
        disqusScript.src = `//${this.dService.shortname}.disqus.com/embed.js`;
        disqusScript.async = true;
        disqusScript.type = 'text/javascript';
        this.renderer.setAttribute(disqusScript, 'data-timestamp', new Date().getTime().toString());
        this.renderer.appendChild(this.el.nativeElement, disqusScript);
    }
    /**
     * Reset DISQUS with the new config
     * @return {?}
     */
    reset() {
        this.dService.DISQUS.reset({
            reload: true,
            config: this.getConfig()
        });
    }
    /**
     * Create DISQUS config from inputs
     * @return {?}
     */
    getConfig() {
        /** @type {?} */
        const self = this;
        return function () {
            this.page.identifier = self.identifier;
            this.page.url = self.validateUrl(self.url);
            this.page.title = self.title;
            this.category_id = self.category;
            this.language = self.language;
            /* Available callbacks are afterRender, onInit, onNewComment, onPaginate, onReady, preData, preInit, preReset */
            this.callbacks.onNewComment = [(e) => {
                    self.newComment.emit(e);
                }];
            this.callbacks.onReady = [(e) => {
                    self.ready.emit(e);
                }];
            this.callbacks.onPaginate = [(e) => {
                    self.paginate.emit(e);
                }];
        };
    }
    /**
     * @param {?} url
     * @return {?}
     */
    validateUrl(url) {
        /** Validate URL input */
        if (url) {
            /** @type {?} */
            const r = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
            if (r.test(url)) {
                return url;
            }
            else {
                console.warn('[Disqus]: Invalid URL, return undefined');
            }
        }
        /** DISQUS will fallback to "Window.location.href" when URL is undefined */
        return undefined;
    }
}
DisqusComponent.decorators = [
    { type: Component, args: [{
                selector: 'disqus',
                template: '<div id="disqus_thread"></div>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
DisqusComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: DisqusService }
];
DisqusComponent.propDecorators = {
    url: [{ type: Input }],
    identifier: [{ type: Input }],
    title: [{ type: Input }],
    category: [{ type: Input }],
    language: [{ type: Input }],
    newComment: [{ type: Output }],
    ready: [{ type: Output }],
    paginate: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Initialize Disqus with shortname
 * @param {?} shortname
 * @param {?} window
 * @return {?}
 */
function DisqusFactory(shortname, window) {
    return new DisqusService(shortname, window);
}
class DisqusModule {
    /**
     * @param {?} shortname
     * @return {?}
     */
    static forRoot(shortname) {
        return {
            ngModule: DisqusModule,
            providers: [
                WINDOW_PROVIDERS,
                { provide: SHORTNAME, useValue: shortname },
                {
                    provide: DisqusService,
                    useFactory: DisqusFactory,
                    deps: [SHORTNAME, WINDOW]
                },
            ]
        };
    }
}
DisqusModule.decorators = [
    { type: NgModule, args: [{
                declarations: [DisqusComponent],
                exports: [DisqusComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { DisqusModule, DisqusService, DisqusComponent as ɵb, DisqusFactory as ɵa, SHORTNAME as ɵc, BrowserWindowRef as ɵf, WINDOW as ɵd, WINDOW_PROVIDERS as ɵj, WindowRef as ɵe, browserWindowProvider as ɵh, windowFactory as ɵg, windowProvider as ɵi };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,